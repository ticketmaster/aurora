webpackJsonp([2],{1203:function(n,e,t){var a=t(0),o=t(65),r=t(15).PageRenderer;r.__esModule&&(r=r.default);var s=o({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1228)}},componentWillMount:function(){},render:function(){return a.createElement(r,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,n.exports=s},1228:function(n,e){n.exports="### Tabs\n\n```table\nspan: 6\nrows:\n  - Prop: items\n    Type: [node]\n    Default:\n    Notes: Required. Array of tab items.\n  - Prop: itemsProps\n    Type: [array]\n    Default:\n    Notes: Optional. Array of objects that determine attributes applied to every tab item.\n  - Prop: defaultItemProps\n    Type: object\n    Default:\n    Notes: Optional. Object that determines default attributes applied to every tab item.\n  - Prop: index\n    Type: number\n    Default: -1\n    Notes: Optional. Index of currently selected item.\n  - Prop: onClick\n    Type: func(index)\n    Default: ()=>{}\n    Notes: Optional. Function that handles onclick event on item and takes index of item as an argument.\n  - Prop: tabChangedWithArrowKeys\n    Type: func(index)\n    Default: ()=>{}\n    Notes: Optional. This function is invoked when tab is changed with arrow keys. Takes index of item as an argument.\n  - Prop: variant\n    Type: bool\n    Default: dark\n    Notes: Optional. Determines the style of the Text. One of \u201cdark\u201d, \u201clight\u201d, and \u201caccent\u201d\n  - Prop: accent\n    Type: string\n    Default:\n    Notes: Optional. If variant equals \u201caccent\u201d, this props determines the style of the Text. One of \u201caquamarine\u201d, \u201cazure\u201d, \u201calert\u201d, \u201ccaution\u201d, \u201ccruz\u201d, \u201cheliotrope\u201d, \u201cpositive\u201d, \u201csummerSky\u201d, and \u201cturquoise\u201d.\n  - Prop: weight\n    Type: string\n    Default: regular\n    Notes: Optional. Determines the font-weight of the Text. One of \u201cregular\u201d and \u201csemiBold\u201d.\n  - Prop: underlineColor\n    Type: string\n    Default: #026cdf(themes.tm.primary.base)\n    Notes: Optional. Determines underline color of selected item.\n  - Prop: withBorderBottom\n    Type: bool\n    Default: true\n    Notes: Optional. Determines whether there should be a border beneath the Tabs component.\n```\n\n## TabsProvider, TabsConsumer\n\nProvide child component with tabIndex and onChangeTabIndex;\n\n**tabIndex** - Represents index of currently selected tab.\n**onChangeTabIndex** - Function, that can be invoked to create event hanler to change the value of tabIndex. Optionaly takes callback function, that will be called with new tabIndex as an argument. Returns a function, that takes one argument: new value of tabIndex to set or event object (requires evet target to have data-index attribute).\n\n### Tabs with TabsProvider and TabsConsumer components on a light background\n\n```react\nresponsive: true\n---\n<div style={{\n  padding: '16px'\n}}>\n<TabsProvider>\n    <TabsConsumer>\n      {({ tabIndex, onChangeTabIndex }) => (\n        <React.Fragment>\n        <Tabs\n          items={['first tab', 'second tab', 'third tab', 'fourth tab', 'fifth tab', 'sixth tab']}\n          itemsProps={[{'data-custom-info': 'someInfo_0'}, {'data-custom-info': 'someInfo_1'}, {'data-custom-info': 'someInfo_2'}]}\n          defaultItemProps={{'data-custom-info': 'someDefaultInfo'}}\n          index={tabIndex}\n          onClick={onChangeTabIndex()}\n          tabChangedWithArrowKeys={onChangeTabIndex()}\n        />\n        <Column>\n        <Text weight=\"semiBold\">Content for tab #{tabIndex + 1}</Text>\n        <Button onClick={()=>{onChangeTabIndex()(5)}}>Go To Tab #6</Button>\n        </Column>\n        </React.Fragment>\n      )}\n    </TabsConsumer>\n</TabsProvider>\n</div>\n```\n\n### Tabs with TabsProvider and TabsConsumer components on a dark background\n\n```react\nresponsive: true\n---\n<div style={{\n  padding: '16px',\n  backgroundColor: themes.tm.brand\n}}>\n<TabsProvider>\n    <TabsConsumer>\n      {({ tabIndex, onChangeTabIndex }) => (\n        <React.Fragment>\n        <Tabs\n          items={['first tab', 'second tab', 'third tab', 'fourth tab', 'fifth tab', 'sixth tab']}\n          itemsProps={[{'data-custom-info': 'someInfo_0'}, {'data-custom-info': 'someInfo_1'}, {'data-custom-info': 'someInfo_2'}]}\n          defaultItemProps={{'data-custom-info': 'someDefaultInfo'}}\n          index={tabIndex}\n          onClick={onChangeTabIndex()}\n          tabChangedWithArrowKeys={onChangeTabIndex()}\n          withBorderBottom={false}\n          underlineColor={themes.global.white.base}\n          style={{ color: themes.global.white.base }}\n        />\n        <Column>\n        <Text variant=\"light\" weight=\"semiBold\">Content for tab #{tabIndex + 1}</Text>\n        <Button onClick={()=>{onChangeTabIndex()(5)}}>Go To Tab #6</Button>\n        </Column>\n        </React.Fragment>\n      )}\n    </TabsConsumer>\n</TabsProvider>\n</div>\n```\n"}});
//# sourceMappingURL=2.98ea35f1.chunk.js.map